{
    "alloc_samples": 0,
    "elapsed_time_sec": 33.099194049835205,
    "files": {
        "c:\\Users\\joche\\FIM Kernkompetenzzentrum\\Paper Agent-based Modeling - Dokumente\\General\\04 ABM\\02_implementation\\energy_model\\CommunityMember.py": {
            "functions": [
                {
                    "line": "CommunityMember.__init__",
                    "lineno": 11,
                    "memory_samples": [],
                    "n_avg_mb": 0.0,
                    "n_copy_mb_s": 0.0,
                    "n_cpu_percent_c": 0.006264206080145332,
                    "n_cpu_percent_python": 0.022272732729405623,
                    "n_gpu_avg_memory_mb": 0.0,
                    "n_gpu_peak_memory_mb": 0.0,
                    "n_gpu_percent": 0,
                    "n_growth_mb": 0.0,
                    "n_malloc_mb": 0.0,
                    "n_mallocs": 0,
                    "n_peak_mb": 0.0,
                    "n_python_fraction": 0,
                    "n_sys_percent": 0.08544059927562499,
                    "n_usage_fraction": 0
                },
                {
                    "line": "CommunityMember.update_data",
                    "lineno": 70,
                    "memory_samples": [],
                    "n_avg_mb": 0.0,
                    "n_copy_mb_s": 0.0,
                    "n_cpu_percent_c": 0.008168383992887935,
                    "n_cpu_percent_python": 0.02904314308582377,
                    "n_gpu_avg_memory_mb": 0.0,
                    "n_gpu_peak_memory_mb": 0.0,
                    "n_gpu_percent": 0,
                    "n_growth_mb": 0.0,
                    "n_malloc_mb": 0.0,
                    "n_mallocs": 0,
                    "n_peak_mb": 0.0,
                    "n_python_fraction": 0,
                    "n_sys_percent": 0.07676601100646424,
                    "n_usage_fraction": 0
                },
                {
                    "line": "CommunityMember.setup_hems",
                    "lineno": 90,
                    "memory_samples": [],
                    "n_avg_mb": 0.0,
                    "n_copy_mb_s": 0.0,
                    "n_cpu_percent_c": 0.1822984315663699,
                    "n_cpu_percent_python": 0.27690900997423273,
                    "n_gpu_avg_memory_mb": 0.0,
                    "n_gpu_peak_memory_mb": 0.0,
                    "n_gpu_percent": 0,
                    "n_growth_mb": 0.0,
                    "n_malloc_mb": 0.0,
                    "n_mallocs": 0,
                    "n_peak_mb": 0.0,
                    "n_python_fraction": 0,
                    "n_sys_percent": 0.6472086598715932,
                    "n_usage_fraction": 0
                }
            ],
            "leaks": {},
            "lines": [
                {
                    "line": "        self.setup_hems()\n",
                    "lineno": 68,
                    "memory_samples": [],
                    "n_avg_mb": 0.0,
                    "n_copy_mb_s": 0.0,
                    "n_cpu_percent_c": 0.006264206080145332,
                    "n_cpu_percent_python": 0.022272732729405623,
                    "n_gpu_avg_memory_mb": 0.0,
                    "n_gpu_peak_memory_mb": 0.0,
                    "n_gpu_percent": 0,
                    "n_growth_mb": 0.0,
                    "n_malloc_mb": 0.0,
                    "n_mallocs": 0,
                    "n_peak_mb": 0.0,
                    "n_python_fraction": 0,
                    "n_sys_percent": 0.08544059927562499,
                    "n_usage_fraction": 0
                },
                {
                    "line": "                                  np.array(self.model.database.qh_residential_ev_load_profiles[\n",
                    "lineno": 79,
                    "memory_samples": [],
                    "n_avg_mb": 0.0,
                    "n_copy_mb_s": 0.0,
                    "n_cpu_percent_c": 0.0,
                    "n_cpu_percent_python": 0.0,
                    "n_gpu_avg_memory_mb": 0.0,
                    "n_gpu_peak_memory_mb": 0.0,
                    "n_gpu_percent": 0,
                    "n_growth_mb": 0.0,
                    "n_malloc_mb": 0.0,
                    "n_mallocs": 0,
                    "n_peak_mb": 0.0,
                    "n_python_fraction": 0,
                    "n_sys_percent": 0.04447903925275159,
                    "n_usage_fraction": 0
                },
                {
                    "line": "        self.price_g_d = np.array(self.model.database.qh_electricity_price_kWh['price_ct_kWh'][ti])\n",
                    "lineno": 85,
                    "memory_samples": [],
                    "n_avg_mb": 0.0,
                    "n_copy_mb_s": 0.0,
                    "n_cpu_percent_c": 0.01633676798577587,
                    "n_cpu_percent_python": 0.02904314308582377,
                    "n_gpu_avg_memory_mb": 0.0,
                    "n_gpu_peak_memory_mb": 0.0,
                    "n_gpu_percent": 0,
                    "n_growth_mb": 0.0,
                    "n_malloc_mb": 0.0,
                    "n_mallocs": 0,
                    "n_peak_mb": 0.0,
                    "n_python_fraction": 0,
                    "n_sys_percent": 0.02411858776082472,
                    "n_usage_fraction": 0
                },
                {
                    "line": "                self.m.addConstr(self.pv[j] <= self.PV[j], name=f'pv_ub_{j}')\n",
                    "lineno": 123,
                    "memory_samples": [],
                    "n_avg_mb": 0.0,
                    "n_copy_mb_s": 0.0,
                    "n_cpu_percent_c": 0.008347619875692769,
                    "n_cpu_percent_python": 0.014840213112342699,
                    "n_gpu_avg_memory_mb": 0.0,
                    "n_gpu_peak_memory_mb": 0.0,
                    "n_gpu_percent": 0,
                    "n_growth_mb": 0.0,
                    "n_malloc_mb": 0.0,
                    "n_mallocs": 0,
                    "n_peak_mb": 0.0,
                    "n_python_fraction": 0,
                    "n_sys_percent": 0.046310665844388886,
                    "n_usage_fraction": 0
                },
                {
                    "line": "                    self.m.addConstr(self.n_d_binary[j] * self.big_M >= self.n_d[j], name=f'n_d_bin_{j}')\n",
                    "lineno": 139,
                    "memory_samples": [],
                    "n_avg_mb": 0.0,
                    "n_copy_mb_s": 0.0,
                    "n_cpu_percent_c": 0.09113390146739035,
                    "n_cpu_percent_python": 0.04288654186700722,
                    "n_gpu_avg_memory_mb": 0.0,
                    "n_gpu_peak_memory_mb": 0.0,
                    "n_gpu_percent": 0,
                    "n_growth_mb": 0.0,
                    "n_malloc_mb": 0.0,
                    "n_mallocs": 0,
                    "n_peak_mb": 0.0,
                    "n_python_fraction": 0,
                    "n_sys_percent": 0.004976554330451148,
                    "n_usage_fraction": 0
                },
                {
                    "line": "                    self.m.addConstr(self.n_s_binary[j] * self.big_M >= self.n_s[j], name=f'n_s_bin_{j}')\n",
                    "lineno": 140,
                    "memory_samples": [],
                    "n_avg_mb": 0.0,
                    "n_copy_mb_s": 0.0,
                    "n_cpu_percent_c": 0.013006559551924524,
                    "n_cpu_percent_python": 0.02312277253675471,
                    "n_gpu_avg_memory_mb": 0.0,
                    "n_gpu_peak_memory_mb": 0.0,
                    "n_gpu_percent": 0,
                    "n_growth_mb": 0.0,
                    "n_malloc_mb": 0.0,
                    "n_mallocs": 0,
                    "n_peak_mb": 0.0,
                    "n_python_fraction": 0,
                    "n_sys_percent": 0.03336916674374512,
                    "n_usage_fraction": 0
                },
                {
                    "line": "                self.m.addConstr(self.hb_c_binary[j] * self.big_M >= self.hb_c[j], name=f'hb_c_bin_{j}')\n",
                    "lineno": 146,
                    "memory_samples": [],
                    "n_avg_mb": 0.0,
                    "n_copy_mb_s": 0.0,
                    "n_cpu_percent_c": 0.0,
                    "n_cpu_percent_python": 0.0,
                    "n_gpu_avg_memory_mb": 0.0,
                    "n_gpu_peak_memory_mb": 0.0,
                    "n_gpu_percent": 0,
                    "n_growth_mb": 0.0,
                    "n_malloc_mb": 0.0,
                    "n_mallocs": 0,
                    "n_peak_mb": 0.0,
                    "n_python_fraction": 0,
                    "n_sys_percent": 0.04447903925275159,
                    "n_usage_fraction": 0
                },
                {
                    "line": "                    self.m.addConstr(self.hb_soc[j] == self.hb_soc[j - 1] + self.hb_c[j] * self.hb_eta_c - self.hb_d[\n",
                    "lineno": 155,
                    "memory_samples": [],
                    "n_avg_mb": 0.0,
                    "n_copy_mb_s": 0.0,
                    "n_cpu_percent_c": 0.0,
                    "n_cpu_percent_python": 0.0,
                    "n_gpu_avg_memory_mb": 0.0,
                    "n_gpu_peak_memory_mb": 0.0,
                    "n_gpu_percent": 0,
                    "n_growth_mb": 0.0,
                    "n_malloc_mb": 0.0,
                    "n_mallocs": 0,
                    "n_peak_mb": 0.0,
                    "n_python_fraction": 0,
                    "n_sys_percent": 0.04447903925275159,
                    "n_usage_fraction": 0
                },
                {
                    "line": "                self.m.addConstr(self.hb_c[j] <= 0, name=f'consumer -> hb_c = 0_{j}')\n",
                    "lineno": 160,
                    "memory_samples": [],
                    "n_avg_mb": 0.0,
                    "n_copy_mb_s": 0.0,
                    "n_cpu_percent_c": 0.08314808914635644,
                    "n_cpu_percent_python": 0.03912851253946185,
                    "n_gpu_avg_memory_mb": 0.0,
                    "n_gpu_peak_memory_mb": 0.0,
                    "n_gpu_percent": 0,
                    "n_growth_mb": 0.0,
                    "n_malloc_mb": 0.0,
                    "n_mallocs": 0,
                    "n_peak_mb": 0.0,
                    "n_python_fraction": 0,
                    "n_sys_percent": 0.016720395979030432,
                    "n_usage_fraction": 0
                },
                {
                    "line": "                self.m.addConstr(self.l_ev[j] <= 0, name=f'no ev -> l_ev_{j} = 0')\n",
                    "lineno": 174,
                    "memory_samples": [],
                    "n_avg_mb": 0.0,
                    "n_copy_mb_s": 0.0,
                    "n_cpu_percent_c": 0.008414912292906205,
                    "n_cpu_percent_python": 0.014959844076277696,
                    "n_gpu_avg_memory_mb": 0.0,
                    "n_gpu_peak_memory_mb": 0.0,
                    "n_gpu_percent": 0,
                    "n_growth_mb": 0.0,
                    "n_malloc_mb": 0.0,
                    "n_mallocs": 0,
                    "n_peak_mb": 0.0,
                    "n_python_fraction": 0,
                    "n_sys_percent": 0.046123742463240455,
                    "n_usage_fraction": 0
                },
                {
                    "line": "                self.m.addConstr((self.l_ev[j] == 1) >> (self.ev_d[j] >= 0), name=f'l_ev_{j} = 1 -> ev_d_{j} >= 0')\n",
                    "lineno": 185,
                    "memory_samples": [],
                    "n_avg_mb": 0.0,
                    "n_copy_mb_s": 0.0,
                    "n_cpu_percent_c": 0.012613625700171875,
                    "n_cpu_percent_python": 0.02242422346697222,
                    "n_gpu_avg_memory_mb": 0.0,
                    "n_gpu_peak_memory_mb": 0.0,
                    "n_gpu_percent": 0,
                    "n_growth_mb": 0.0,
                    "n_malloc_mb": 0.0,
                    "n_mallocs": 0,
                    "n_peak_mb": 0.0,
                    "n_python_fraction": 0,
                    "n_sys_percent": 0.034460649665280264,
                    "n_usage_fraction": 0
                },
                {
                    "line": "            self.m.addConstr(\n",
                    "lineno": 197,
                    "memory_samples": [],
                    "n_avg_mb": 0.0,
                    "n_copy_mb_s": 0.0,
                    "n_cpu_percent_c": 0.012568126331895756,
                    "n_cpu_percent_python": 0.02234333570114801,
                    "n_gpu_avg_memory_mb": 0.0,
                    "n_gpu_peak_memory_mb": 0.0,
                    "n_gpu_percent": 0,
                    "n_growth_mb": 0.0,
                    "n_malloc_mb": 0.0,
                    "n_mallocs": 0,
                    "n_peak_mb": 0.0,
                    "n_python_fraction": 0,
                    "n_sys_percent": 0.03458703679938059,
                    "n_usage_fraction": 0
                },
                {
                    "line": "                (self.g_d[j] - self.g_s[j] + self.n_d[j] - self.n_s[j] + self.pv[j] + self.hb_d[j] - self.hb_c[j] +\n",
                    "lineno": 198,
                    "memory_samples": [],
                    "n_avg_mb": 0.0,
                    "n_copy_mb_s": 0.0,
                    "n_cpu_percent_c": 0.020873719032714903,
                    "n_cpu_percent_python": 0.037108833835937605,
                    "n_gpu_avg_memory_mb": 0.0,
                    "n_gpu_peak_memory_mb": 0.0,
                    "n_gpu_percent": 0,
                    "n_growth_mb": 0.0,
                    "n_malloc_mb": 0.0,
                    "n_mallocs": 0,
                    "n_peak_mb": 0.0,
                    "n_python_fraction": 0,
                    "n_sys_percent": 0.08101444479619621,
                    "n_usage_fraction": 0
                },
                {
                    "line": "                (self.g_d[j] - self.g_s[j] + self.n_d[j] - self.n_s[j] + self.pv[j] + self.hb_d[j] - self.hb_c[j] +\n",
                    "lineno": 201,
                    "memory_samples": [],
                    "n_avg_mb": 0.0,
                    "n_copy_mb_s": 0.0,
                    "n_cpu_percent_c": 0.02535246541617079,
                    "n_cpu_percent_python": 0.06009473283833077,
                    "n_gpu_avg_memory_mb": 0.0,
                    "n_gpu_peak_memory_mb": 0.0,
                    "n_gpu_percent": 0,
                    "n_growth_mb": 0.0,
                    "n_malloc_mb": 0.0,
                    "n_mallocs": 0,
                    "n_peak_mb": 0.0,
                    "n_python_fraction": 0,
                    "n_sys_percent": 0.1675273374955231,
                    "n_usage_fraction": 0
                }
            ],
            "percent_cpu_time": 1.3343711775825478
        },
        "c:\\Users\\joche\\FIM Kernkompetenzzentrum\\Paper Agent-based Modeling - Dokumente\\General\\04 ABM\\02_implementation\\energy_model\\data_setup.py": {
            "functions": [
                {
                    "line": "setup_data",
                    "lineno": 28,
                    "memory_samples": [],
                    "n_avg_mb": 0.0,
                    "n_copy_mb_s": 0.0,
                    "n_cpu_percent_c": 11.504463023514463,
                    "n_cpu_percent_python": 15.776473498494498,
                    "n_gpu_avg_memory_mb": 0.0,
                    "n_gpu_peak_memory_mb": 0.0,
                    "n_gpu_percent": 0,
                    "n_growth_mb": 0.0,
                    "n_malloc_mb": 0.0,
                    "n_mallocs": 0,
                    "n_peak_mb": 0.0,
                    "n_python_fraction": 0,
                    "n_sys_percent": 69.39981517375286,
                    "n_usage_fraction": 0
                }
            ],
            "leaks": {},
            "lines": [
                {
                    "line": "    simulation_data['qh_load_profiles_kWh'] = pd.read_excel(residential_load_profile_path).iloc[:, 1:]\n",
                    "lineno": 45,
                    "memory_samples": [],
                    "n_avg_mb": 0.0,
                    "n_copy_mb_s": 0.0,
                    "n_cpu_percent_c": 5.06605375500747,
                    "n_cpu_percent_python": 6.235143083086027,
                    "n_gpu_avg_memory_mb": 0.0,
                    "n_gpu_peak_memory_mb": 0.0,
                    "n_gpu_percent": 0,
                    "n_growth_mb": 0.0,
                    "n_malloc_mb": 0.0,
                    "n_mallocs": 0,
                    "n_peak_mb": 0.0,
                    "n_python_fraction": 0,
                    "n_sys_percent": 23.284036120874006,
                    "n_usage_fraction": 0
                },
                {
                    "line": "    simulation_data['qh_ev_load_profiles_kWh'] = pd.read_excel(residential_ev_load_profile_path).iloc[:, 1:]\n",
                    "lineno": 47,
                    "memory_samples": [],
                    "n_avg_mb": 0.0,
                    "n_copy_mb_s": 0.0,
                    "n_cpu_percent_c": 3.8543509395595223,
                    "n_cpu_percent_python": 5.727757930740341,
                    "n_gpu_avg_memory_mb": 0.0,
                    "n_gpu_peak_memory_mb": 0.0,
                    "n_gpu_percent": 0,
                    "n_growth_mb": 0.0,
                    "n_malloc_mb": 0.0,
                    "n_mallocs": 0,
                    "n_peak_mb": 0.0,
                    "n_python_fraction": 0,
                    "n_sys_percent": 28.069397857154136,
                    "n_usage_fraction": 0
                },
                {
                    "line": "    file = pd.read_excel(electricity_price_dir + '\\\\' + file_path)\n",
                    "lineno": 51,
                    "memory_samples": [],
                    "n_avg_mb": 0.0,
                    "n_copy_mb_s": 0.0,
                    "n_cpu_percent_c": 0.3544538286456379,
                    "n_cpu_percent_python": 0.6023712522972202,
                    "n_gpu_avg_memory_mb": 0.0,
                    "n_gpu_peak_memory_mb": 0.0,
                    "n_gpu_percent": 0,
                    "n_growth_mb": 0.0,
                    "n_malloc_mb": 0.0,
                    "n_mallocs": 0,
                    "n_peak_mb": 0.0,
                    "n_python_fraction": 0,
                    "n_sys_percent": 5.6844514674836155,
                    "n_usage_fraction": 0
                },
                {
                    "line": "    simulation_data['qh_pv_generation_factors'] = pd.read_excel(pv_generation_factors_path).iloc[:, 1:]\n",
                    "lineno": 55,
                    "memory_samples": [],
                    "n_avg_mb": 0.0,
                    "n_copy_mb_s": 0.0,
                    "n_cpu_percent_c": 1.0544691191038884,
                    "n_cpu_percent_python": 1.2475920102209386,
                    "n_gpu_avg_memory_mb": 0.0,
                    "n_gpu_peak_memory_mb": 0.0,
                    "n_gpu_percent": 0,
                    "n_growth_mb": 0.0,
                    "n_malloc_mb": 0.0,
                    "n_mallocs": 0,
                    "n_peak_mb": 0.0,
                    "n_python_fraction": 0,
                    "n_sys_percent": 4.756206412096193,
                    "n_usage_fraction": 0
                },
                {
                    "line": "    file = pd.read_excel(co2_factor_dir + file_path, index_col=0)\n",
                    "lineno": 61,
                    "memory_samples": [],
                    "n_avg_mb": 0.0,
                    "n_copy_mb_s": 0.0,
                    "n_cpu_percent_c": 1.376773543523279,
                    "n_cpu_percent_python": 1.9636092221499646,
                    "n_gpu_avg_memory_mb": 0.0,
                    "n_gpu_peak_memory_mb": 0.0,
                    "n_gpu_percent": 0,
                    "n_growth_mb": 0.0,
                    "n_malloc_mb": 0.0,
                    "n_mallocs": 0,
                    "n_peak_mb": 0.0,
                    "n_python_fraction": 0,
                    "n_sys_percent": 7.404085153819566,
                    "n_usage_fraction": 0
                }
            ],
            "percent_cpu_time": 96.68075169576325
        },
        "c:\\Users\\joche\\FIM Kernkompetenzzentrum\\Paper Agent-based Modeling - Dokumente\\General\\04 ABM\\02_implementation\\energy_model\\network_setup.py": {
            "functions": [
                {
                    "line": "load_network",
                    "lineno": 123,
                    "memory_samples": [],
                    "n_avg_mb": 0.0,
                    "n_copy_mb_s": 0.0,
                    "n_cpu_percent_c": 0.0019326493990427284,
                    "n_cpu_percent_python": 0.00014632045923351886,
                    "n_gpu_avg_memory_mb": 0.0,
                    "n_gpu_peak_memory_mb": 0.0,
                    "n_gpu_percent": 0,
                    "n_growth_mb": 0.0,
                    "n_malloc_mb": 0.0,
                    "n_mallocs": 0,
                    "n_peak_mb": 0.0,
                    "n_python_fraction": 0,
                    "n_sys_percent": 1.89384007829026,
                    "n_usage_fraction": 0
                }
            ],
            "leaks": {},
            "lines": [
                {
                    "line": "    filtered_buildings_incl_roofs_gdf = gpd.read_file('filtered_buildings_incl_roofs.shp')\n",
                    "lineno": 127,
                    "memory_samples": [],
                    "n_avg_mb": 0.0,
                    "n_copy_mb_s": 0.0,
                    "n_cpu_percent_c": 0.005797948197128185,
                    "n_cpu_percent_python": 0.00014632045923351886,
                    "n_gpu_avg_memory_mb": 0.0,
                    "n_gpu_peak_memory_mb": 0.0,
                    "n_gpu_percent": 0,
                    "n_growth_mb": 0.0,
                    "n_malloc_mb": 0.0,
                    "n_mallocs": 0,
                    "n_peak_mb": 0.0,
                    "n_python_fraction": 0,
                    "n_sys_percent": 1.8010167009866715,
                    "n_usage_fraction": 0
                },
                {
                    "line": "    filtered_buildings_incl_roofs_df = pd.read_excel('filtered_buildings_incl_roofs.xlsx').iloc[:, 1:]\n",
                    "lineno": 128,
                    "memory_samples": [],
                    "n_avg_mb": 0.0,
                    "n_copy_mb_s": 0.0,
                    "n_cpu_percent_c": 0.0,
                    "n_cpu_percent_python": 0.0,
                    "n_gpu_avg_memory_mb": 0.0,
                    "n_gpu_peak_memory_mb": 0.0,
                    "n_gpu_percent": 0,
                    "n_growth_mb": 0.0,
                    "n_malloc_mb": 0.0,
                    "n_mallocs": 0,
                    "n_peak_mb": 0.0,
                    "n_python_fraction": 0,
                    "n_sys_percent": 0.04447903925275159,
                    "n_usage_fraction": 0
                },
                {
                    "line": "        graph = weights.Gabriel.from_dataframe(filtered_buildings_incl_roofs_gdf.centroid)\n",
                    "lineno": 138,
                    "memory_samples": [],
                    "n_avg_mb": 0.0,
                    "n_copy_mb_s": 0.0,
                    "n_cpu_percent_c": 0.0,
                    "n_cpu_percent_python": 0.0,
                    "n_gpu_avg_memory_mb": 0.0,
                    "n_gpu_peak_memory_mb": 0.0,
                    "n_gpu_percent": 0,
                    "n_growth_mb": 0.0,
                    "n_malloc_mb": 0.0,
                    "n_mallocs": 0,
                    "n_peak_mb": 0.0,
                    "n_python_fraction": 0,
                    "n_sys_percent": 0.04447903925275159,
                    "n_usage_fraction": 0
                }
            ],
            "percent_cpu_time": 1.8959190481485364
        }
    },
    "gpu": false,
    "growth_rate": 0.0,
    "max_footprint_fname": null,
    "max_footprint_lineno": null,
    "max_footprint_mb": 0,
    "memory": false,
    "program": "ipython-input-21-profile",
    "samples": []
}
